{"ast":null,"code":"var _jsxFileName = \"E:\\\\Courses\\\\ReactJs\\\\Movies_API\\\\01-starting-project\\\\src\\\\App.js\";\n// import React, { useState } from 'react';\n// import MoviesList from './components/MoviesList';\n// import './App.css';\n// function App() {\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setLoading] = useState(false)\n//   const [error, setError] = useState(null)\n//   const  fetchMovieHandler=async()=>{\n//     setLoading(true)\n//     setError(null)\n//     try{\n//       const response = await fetch('https://swapi.dev/api/film/')\n//       if(!response.ok){\n//        throw new Error('Something is wrong')\n//       }\n//     console.log(response)\n//      const data = await response.json()\n//       const transformedMovies = data.results.map(movieData => {\n//         return {\n//             id: movieData.episode_id,\n//             title: movieData.title,\n//             openingText: movieData.opening_crawl,\n//             releaseDate: movieData.release_date,\n//           };\n//       })\n//       console.log(data.results)\n//       setMovies(transformedMovies)\n//     } \n//     catch(error){\n//       console.log(error)\n//       setError(false) \n//     }\n//     setLoading(false)\n//   }\n//     return (\n//     <React.Fragment>\n//       <section>\n//         <button onClick={fetchMovieHandler}>Fetch Movies</button>\n//       </section>\n//       <section>\n//         {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n//         {!isLoading && movies.length===0 && !error && <p>Found no Movies</p>}\n//         {!isLoading && error && <p>{error}</p>} \n//         {isLoading && <p>Loading...</p>}\n//       </section>\n//     </React.Fragment>\n//   );\n//   }\n// export default App;\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMovieHandler = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/film/');\n\n      if (!response.ok) {\n        throw new Error('Something is wrong');\n      }\n\n      console.log(response);\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      console.log(data.results);\n      setMovies(transformedMovies);\n    } catch (error) {\n      console.log(error);\n      setError(false);\n    }\n\n    setLoading(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 45\n    }\n  }), !isLoading && movies.length === 0 && !error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 55\n    }\n  }, \"Found no Movies\"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 33\n    }\n  }, error), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 23\n    }\n  }, \"Loading...\")));\n}","map":{"version":3,"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setLoading","error","setError","fetchMovieHandler","response","fetch","ok","Error","console","log","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","length"],"sources":["E:/Courses/ReactJs/Movies_API/01-starting-project/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n\n// import MoviesList from './components/MoviesList';\n// import './App.css';\n\n// function App() {\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setLoading] = useState(false)\n//   const [error, setError] = useState(null)\n\n\n//   const  fetchMovieHandler=async()=>{\n//     setLoading(true)\n//     setError(null)\n//     try{\n//       const response = await fetch('https://swapi.dev/api/film/')\n//       if(!response.ok){\n//        throw new Error('Something is wrong')\n//       }\n//     console.log(response)\n//      const data = await response.json()\n    \n//       const transformedMovies = data.results.map(movieData => {\n//         return {\n//             id: movieData.episode_id,\n//             title: movieData.title,\n//             openingText: movieData.opening_crawl,\n//             releaseDate: movieData.release_date,\n//           };\n//       })\n//       console.log(data.results)\n\n//       setMovies(transformedMovies)\n//     } \n//     catch(error){\n//       console.log(error)\n//       setError(false) \n//     }\n//     setLoading(false)\n//   }\n//     return (\n//     <React.Fragment>\n//       <section>\n        \n//         <button onClick={fetchMovieHandler}>Fetch Movies</button>\n        \n//       </section>\n//       <section>\n//         {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n//         {!isLoading && movies.length===0 && !error && <p>Found no Movies</p>}\n//         {!isLoading && error && <p>{error}</p>} \n//         {isLoading && <p>Loading...</p>}\n        \n//       </section>\n//     </React.Fragment>\n//   );\n//   }\n\n// export default App;\nimport React, { useState } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n\n  const  fetchMovieHandler=async()=>{\n    setLoading(true)\n    setError(null)\n    try{\n      const response = await fetch('https://swapi.dev/api/film/')\n      if(!response.ok){\n       throw new Error('Something is wrong')\n      }\n    console.log(response)\n     const data = await response.json()\n    \n      const transformedMovies = data.results.map(movieData => {\n        return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n      })\n      console.log(data.results)\n\n      setMovies(transformedMovies)\n    } \n    catch(error){\n      console.log(error)\n      setError(false) \n    }\n    setLoading(false)\n  }\n    return (\n    <React.Fragment>\n      <section>\n        \n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n        \n      </section>\n      <section>\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length===0 && !error && <p>Found no Movies</p>}\n        {!isLoading && error && <p>{error}</p>} \n        {isLoading && <p>Loading...</p>}\n        \n      </section>\n    </React.Fragment>\n  );\n  }\n"],"mappings":";AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AACA,SAASC,GAAT,GAAe;EACb,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACK,SAAD,EAAYC,UAAZ,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;;EAGA,MAAOS,iBAAiB,GAAC,YAAS;IAChCH,UAAU,CAAC,IAAD,CAAV;IACAE,QAAQ,CAAC,IAAD,CAAR;;IACA,IAAG;MACD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;;MACA,IAAG,CAACD,QAAQ,CAACE,EAAb,EAAgB;QACf,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;MACA;;MACHC,OAAO,CAACC,GAAR,CAAYL,QAAZ;MACC,MAAMM,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB;MAEC,MAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBC,SAAS,IAAI;QACtD,OAAO;UACHC,EAAE,EAAED,SAAS,CAACE,UADX;UAEHC,KAAK,EAAEH,SAAS,CAACG,KAFd;UAGHC,WAAW,EAAEJ,SAAS,CAACK,aAHpB;UAIHC,WAAW,EAAEN,SAAS,CAACO;QAJpB,CAAP;MAMD,CAPyB,CAA1B;MAQAd,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACG,OAAjB;MAEAf,SAAS,CAACc,iBAAD,CAAT;IACD,CAnBD,CAoBA,OAAMX,KAAN,EAAY;MACVO,OAAO,CAACC,GAAR,CAAYR,KAAZ;MACAC,QAAQ,CAAC,KAAD,CAAR;IACD;;IACDF,UAAU,CAAC,KAAD,CAAV;EACD,CA5BD;;EA6BE,oBACA,oBAAC,KAAD,CAAO,QAAP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAEE;IAAQ,OAAO,EAAEG,iBAAjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBAFF,CADF,eAME;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACG,CAACJ,SAAD,IAAcF,MAAM,CAAC0B,MAAP,GAAgB,CAA9B,iBAAmC,oBAAC,UAAD;IAAY,MAAM,EAAE1B,MAApB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADtC,EAEG,CAACE,SAAD,IAAcF,MAAM,CAAC0B,MAAP,KAAgB,CAA9B,IAAmC,CAACtB,KAApC,iBAA6C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBAFhD,EAGG,CAACF,SAAD,IAAcE,KAAd,iBAAuB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAIA,KAAJ,CAH1B,EAIGF,SAAS,iBAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAJhB,CANF,CADA;AAgBD"},"metadata":{},"sourceType":"module"}